# {{ ansible_managed }}

router id {{ loopback_address }};
log syslog all;

table MASTER;
table BACKBONE;

filter transfer_nets {
  if net ~ 10.0.0.0/21 then accept;
  if net ~ 192.168.0.0/16 then accept;
  reject;
};

protocol kernel backbone {
  table BACKBONE;
  export filter transfer_nets;
};

filter default_net {
  if net = 0.0.0.0/0 then accept;
  if net ~ 10.0.0.0/21 then reject;
  accept;
};

protocol kernel freifunk {
  table MASTER;
  device routes;
  export filter default_net;
  kernel table 16;
};

protocol device {
  scan time 2;
};

protocol pipe {
  table MASTER;
  peer table BACKBONE;
  import all;
  export none;
};

{% if core_gretun_enable %}
protocol ospf ddorf {
  table BACKBONE;

  area {{ seq }} {
    {% for partner in groups['core'] %}
    interface "tun{{ '%03d' % hostvars[partner].seq }}";
    {% endfor %}
  };
};
{% endif %}

{% if local_as is defined %}
filter local_as {
{% if local_as.ipv4 is defined %}
  if net ~ {{ local_as.ipv4 }} then accept;
{% endif %}
  reject;
};

filter is_default {
  if net = 0.0.0.0/0 then accept;
  reject;
};

template bgp internal {
  local as {{ local_as.number | default(0) }};
  export filter is_default;
  source address {{ loopback_address }};
};

{# select prefix for loopback address of the peer based on sequence number #}
{% set loopback_prefix = internal_ipv4 | ipsubnet(21,0) %}

{# select prefix for edge loopback addresses #}
{% set loopback_prefix_core = loopback_prefix | ipsubnet(22,1) %}

{% for peer in groups['core'] %}

{# get peer sequence number for this session #}
{% set peer_seq = hostvars[peer].seq %}

{# select network for this tunnel based on my (edge) sequence number (/31) #}
{% set peer_loopback_address = loopback_prefix_core | ipaddr(peer_seq) %}

protocol bgp core{{ '%03d' % peer_seq }} from internal {
  neighbor {{ peer_loopback_address | ipaddr('address') }} as {{ local_as.number }};
};
{% endfor %}

{% endif %}