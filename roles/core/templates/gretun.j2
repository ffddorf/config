# {{ ansible_managed }}

# Tunnel to DDorf Edge

{% for partner in uplink_tunnel_partners %}

{# get partner sequence number for this tunnel #}
{% set partner_seq = hostvars[partner].seq %}

{# select prefix for tunnels with me based on my (core) sequence number #}
{% set tunnel_prefix = tunnel_ipv4 | ipsubnet(tunnel_subnet_size,seq) %}

{# select prefix for edge tunnels (0th /20) #}
{% set tunnel_prefix_site = tunnel_prefix | ipsubnet(20,0) %}

{# select network for this tunnel based on edge sequence number (/31) #}
{% set tunnel_network = tunnel_prefix_site | ipsubnet(31,partner_seq) %}

{# get local ip for this tunnel (0th address) #}
{# TODO: fix bug #13716 for real #}
{% set tunnel_address = tunnel_network | ipaddr('1') | ipaddr('address') %}

{# name interface like "tun-edge01" #}
{% set interface_name = "tun-" + hostvars[partner].ansible_hostname %}
auto {{ interface_name }}

iface {{ interface_name }} inet manual
  pre-up ip tunnel add $IFACE mode gre remote {{ hostvars[partner].ansible_default_ipv4.address }} local {{ ansible_default_ipv4.address }} ttl 255
  post-up ip link set dev $IFACE mtu 1400
  post-up ip link set dev $IFACE multicast on
  post-up ip link set up dev $IFACE
  post-up ip rule add iif $IFACE table 16
  post-up ip -6 rule add iif $IFACE table 16
  post-up ip rule add oif $IFACE table 16
  post-up ip -6 rule add oif $IFACE table 16
  post-down ip tunnel del $IFACE

iface {{ interface_name }} inet static
  address {{ tunnel_address }}
  netmask 31

{% endfor %}


{% if downlink_tunnel_partners is defined %}
# Tunnel to DDorf Site

{% for partner in downlink_tunnel_partners %}

{% if hostvars[partner].siteip is defined %}

{# get partner sequence number for this tunnel #}
{% set partner_seq = hostvars[partner].seq %}

{# select prefix for tunnels with me based on my (core) sequence number #}
{% set tunnel_prefix = tunnel_ipv4 | ipsubnet(tunnel_subnet_size,seq) %}

{# select prefix for site tunnels (1st /20) #}
{% set tunnel_prefix_site = tunnel_prefix | ipsubnet(20,1) %}

{# select network for this tunnel based on site sequence number (/31) #}
{% set tunnel_network = tunnel_prefix_site | ipsubnet(31,partner_seq) %}

{# get local ip for this tunnel (0th address) #}
{# TODO: fix bug #13716 for real #}
{% set tunnel_address = tunnel_network | ipv4('network') | ipaddr('address') %}

{# name interface like "tun-site001" #}
{% set interface_name = "tun-site" + '%03d' % hostvars[partner].seq %}

auto {{ interface_name }}

iface {{ interface_name }} inet manual
  pre-up ip tunnel add $IFACE mode gre remote {{ hostvars[partner].siteip }} local {{ ansible_default_ipv4.address }} ttl 255
  post-up ip link set dev $IFACE mtu 1400
  post-up ip link set dev $IFACE multicast on
  post-up ip link set up dev $IFACE
  post-up ip rule add iif $IFACE table 16
  post-up ip -6 rule add iif $IFACE table 16
  post-up ip rule add oif $IFACE table 16
  post-up ip -6 rule add oif $IFACE table 16
  post-down ip tunnel del $IFACE

iface {{ interface_name }} inet static
  address {{ tunnel_address }}
  netmask 31

{% endif %}

{% endfor %}

{% endif %}
