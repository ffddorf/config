# {{ ansible_managed }}

router id {{ loopback_address }};
log syslog all;

table vmstatic;
# tunnel microservice stuff
{% for host in groups['vmguests'] %}
{% if hostvars[host].vm_host | default('') == ansible_hostname and hostvars[host].public_ipv4 %}
protocol static {
  table vmstatic;
  route {{ hostvars[host].public_ipv4 }}/32 via {{ hostvars[host].ansible_eth2.ipv4.address }};
};
{% endif %}
{% endfor %}
protocol kernel {
  table vmstatic;
  export all;
}


protocol kernel freifunk {
  device routes;
  export all;
  kernel table 16;
};

protocol device {
  scan time 2;
};

protocol ospf ddorf {
  area 0 {
    interface "lo" {
      stub;
    };
    interface "tun-edge*";
  };
  area 1 {
    interface "transfer";
  };
};

{% if local_as is defined %}
filter local_as {
{% if local_as.ipv4 is defined %}
  if net ~ {{ local_as.ipv4 }} then accept;
{% endif %}
  reject;
};

filter is_default {
  if net = 0.0.0.0/0 then accept;
  reject;
};

template bgp internal_edge {
  local as {{ local_as.number | default(0) }};
  export none;
  source address {{ loopback_address }};
};

template bgp internal_site {
  local as {{ local_as.number | default(0) }};
  export filter is_default;
  rr client;
  source address {{ loopback_address }};
};

{# select prefix for loopback address of the peer based on sequence number #}
{% set loopback_prefix = internal_ipv4 | ipsubnet(loopback_subnets.backbone.ipv4_size,loopback_subnets.backbone.seq) %}

{# select prefix for edge loopback addresses #}
{% set loopback_prefix_edge = loopback_prefix | ipsubnet(22,0) %}

{# select prefix for edge loopback addresses #}
{% set loopback_prefix_site = loopback_prefix | ipsubnet(23,3) %}

{% for peer in groups['edge'] %}

{# get peer sequence number for this session #}
{% set peer_seq = hostvars[peer].seq %}

{# select network for this tunnel based on my (edge) sequence number (/31) #}
{% set peer_loopback_address = loopback_prefix_edge | ipaddr(peer_seq) %}

protocol bgp edge{{ '%03d' % peer_seq }} from internal_edge {
  neighbor {{ peer_loopback_address | ipaddr('address') }} as {{ local_as.number }};
};
{% endfor %}

{% for peer in groups['site'] %}

{# get peer sequence number for this session #}
{% set peer_seq = hostvars[peer].seq %}

{# select network for this tunnel based on my (edge) sequence number (/31) #}
{% set peer_loopback_address = loopback_prefix_site | ipaddr(peer_seq) %}

#protocol bgp site{{ '%03d' % peer_seq }} from internal_site {
#  neighbor {{ peer_loopback_address | ipaddr('address') }} as {{ local_as.number }};
#};
{% endfor %}

{% endif %}